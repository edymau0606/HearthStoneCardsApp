<!DOCTYPE html>
<html>

<head>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.1.1/jquery.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.0/js/bootstrap.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jexcel/2.1.0/js/jquery.jexcel.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jexcel/2.1.0/js/jquery.jdropdown.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/jexcel/2.1.0/css/jquery.jexcel.min.css" type="text/css" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/jexcel/2.1.0/css/jquery.jdropdown.min.css" type="text/css" />
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.0/css/bootstrap.min.css">
<style>
    .jdropdown-content{
        width: 180px;
        position: relative;
    }

    .modal-open {
      overflow: hidden;
      padding-right: 0 !important;
    }

  .card {
  display: flex;
  height: 280px;
  width: 200px;
  background-color: #17141d;
  border-radius: 10px;
  box-shadow: -1rem 0 3rem #000;
  transition: 0.4s ease-out;
  position: relative;
  left: 0px;
}

.card:not(:first-child) {
    margin-left: -0px;
}

.card:hover {
  transform: translateY(-20px);
  transition: 0.4s ease-out;
}

.card:hover ~ .card {
  position: relative;
  left: 50px;
  transition: 0.4s ease-out;
}

#deckResume{
    position: fixed;
    right: 0;
    top: 50;
}

#cardsContainer{
    background: black;
    color: white;
}

.def{
    overflow: scroll!important;
    height: 400px;
    width: 300px;
    border: 1px solid #642578!important;
    background: black!important;
}

tr:hover{
    background: #642578!important;
}

body h2{
        padding-right: 0 !important;
        color:white!important;
    }

#countCards{
    color:rgb(252, 209, 68);
}

#max{
    color:rgb(252, 209, 68);
}
 #titleFormatClass{
     color:white!important;
 }

 thead{
     border: 1px solid #642578!important;
     color: white!important;
 }

 td{
    color:white!important;    
 }

 .glyphicon-minus:before {
      color:red;
    }

.glyphicon-plus:before {
      color:#A2F130;
}

.panel-heading{
    background: #642578!important;
}

.modal-body{
    background: #996fa6!important;
}

#collapseOne {
    background:black!important;
    color: white!important;
}

.modal-header {
    background: #f1f1f1!important
}

.panel-primary, .panel-body {
    border-color:#642578!important;
}

#submitDeck {
    background:#642578!important;
}

#cancelButton {
    background:#642578!important;
}

#addButton {
    background:#642578!important;
}


</style>
</head>

<body>
    <center><h2 id="deckTitle"></h2></center>
    <div>
        <div class="row">
            <div class="col-md-9">
                <div class="container" id="cardsContainer">
                    <div class="row" id="rowID">
                    </div>
                </div>
            </div>
            <div class="col-md-3" id="deckResume">
                    <center><h3 id="titleFormatClass"></h3></center>
                    <center><label id="countCards">0</label><label id="max">/30</label></center>
                    <div class="def">
                        <table id="mt" class="table table-hover">
                            <thead>
                                <tr>
                                    <th>Card Name</th>
                                    <th>Count</th>
                                    <th>Options</th>
                                    <th style="display:none;">Card ID</th>
                                </tr>
                            </thead>
                            <tbody id="tableDeckCards">
                            </tbody>
                        </table>
                    </div>
                    <div class="text-right">
                        <button id="submitDeck" type="submit" class="btn btn-primary btn-lg" onclick="validate()" hidden>Create</button>
                    </div>
            </div>
        </div>
    </div>
  <div class="modal" id="cardInfoModal">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
          <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span
              class="sr-only">Close</span></button>
        </div>
        <div class="modal-body">
          <div class="row-fluid">
            <div class="panel-group" id="accordion">
              <div class="panel panel-primary">
                <div class="panel-heading">
                <center>
                  <h4 class="panel-title">
                    <a data-toggle="collapse" data-parent="#accordion" href="#collapseOne" id="titleCardInfo">
                    </a>
                  </h4>
                  </center>
                </div>
                <div id="collapseOne" class="panel-collapse collapse in">
                    <center><img id="imgCardInfo" width="120" height="200"/></center>
                  <div class="panel-body">
                    <div class="row-fluid">
                      <div class="container">
                        <div class="col-md-4">
                            <h6 id="cardIDValue" hidden></h6>
                            <h6 id="cardRarityValue" hidden></h6>
                          <center><h6 id="flavor"></h6></center>
                          <center><h5 id="text"></h5></center>
                          <div id="additionalInfo"></div>
                        </div>
                      </div><br /><br />
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div class="modal-footer">
            <button id="cancelButton" type="button" class="btn btn-primary" data-dismiss="modal" onclick="cleanCardInfo()">Cancel</button>
            <button id="addButton" type="button" class="btn btn-primary" onclick="addCardToDeck(this)" data-dismiss="modal">Add Card</button>
          </div>
        </div>

    </div>
  </div>
</div>
 </body>
    <script>
    var xRapidapiKey = document.getElementById("xRapidapiKey").innerText
    var countCards = parseInt(document.getElementById("countCards").innerHTML);
    var cardNames = []
    var cardNamesDuplicated = []
    var cards = []
    var URL = (window.location.search).substring(1);
    var cardFormat = getQueryVariable("cardFormat");
    var cardClass = unescape(getQueryVariable("cardClass"));
    var deckName = unescape(getQueryVariable("deckName"));
    var userName = document.getElementById("userName").innerText

    $(document).ready(() =>{
        var flag = "";
        flag = getQueryVariable("flag")
        if(flag=="edit"){
            countCards = 30
            var countCardsElement = document.getElementById("countCards")
            var maxElement = document.getElementById("max")
            countCardsElement.style.color = '#A2F130'
            maxElement.style.color = '#A2F130'
            var submitDeckButton = document.getElementById("submitDeck")
            submitDeckButton.innerText = "Update";
            submitDeckButton.hidden = false;

            var settings = {
                "async": true,
                "crossDomain": true,
                "url": window.location.origin + "/deck/" + deckName + "-_-" + userName,
                "method": "GET",
                "headers": {
                    "cache-control": "no-cache",
                }
            }

            $.ajax(settings).done(function (response) {
                var deckCards = response.deckCards
                for(card in deckCards){
                    var cardName = ((deckCards[card]).split("-_-"))[0];
                    var count = ((deckCards[card]).split("-_-"))[1];
                    var rarity = ((deckCards[card]).split("-_-"))[2];
                    cardNames.push(cardName)
                    cardNameFixed = cardName.replace(/\s+/g, '')
                    if(count==2){
                        cardNamesDuplicated.push(cardName)
                    } 
                    
                    var fila = "<tr><td align='center'>" + cardName + "</td><td align='center' id='" + cardNameFixed + "Count'>" + count + "</td><td align='center'><a href='#' id='"+ cardNameFixed +"' name='" + cardName + "-_-" + count + "-_-" + rarity +"' onclick='deleteCardFromDeck(this)'><span class='glyphicon glyphicon-minus'></span></a><a href='#' id='"+ cardNameFixed + "-_-Add" +"' name='" + cardName + "-_-" + count + "-_-" + rarity +"' onclick='doubleCardFromDeck(this)'><span class='glyphicon glyphicon-plus'></span></a></td><td align='center' id='" + cardNameFixed + "-_-Info' hidden>" + cardName + "-_-" + count + "-_-" + rarity + "</td></tr>";
                    var tr = document.createElement("TR");
                    tr.innerHTML = fila;
                    tr.setAttribute("draggable", "true");
                    document.getElementById("tableDeckCards").appendChild(tr);
                    document.getElementById("countCards").innerHTML = countCards
                    document.getElementById("countCards").setAttribute("name", countCards)
                }
            });
        }  
    })
    


    document.getElementById("titleFormatClass").innerHTML = cardFormat + " " + cardClass + " Deck"
    document.getElementById("deckTitle").innerHTML = deckName
    var cardSet = [];

    $(document).ready(() => {
        getCardSets()
        .then((resolve) => {
            $.ajax({
                type: "GET",
                url: "https://omgvamp-hearthstone-v1.p.rapidapi.com/cards/classes/" + cardClass,
                headers: {
                    "x-rapidapi-key": xRapidapiKey,
                    "x-rapidapi-host": "omgvamp-hearthstone-v1.p.rapidapi.com"
                },
                dataType: "json",
                success: function (data) {
                    contentType: "application/json";
                    $.each(data, function (i, data) {
                        if((cardSet).includes(data.cardSet)){
                            let image = "";
                            if(data.img==undefined) {
                                image = "../images/no-image.png"
                            } else {
                                image = data.img
                            }
                            var text = "";
                            if(data.text==undefined){
                                text=""
                            } else {
                                text =  (data.text).replace(/[.*+?^${}()<>|]/g, '');
                            }
                            $("#rowID").append('<div class="col-md-3"><center><h4>' + data.name + '</h4><div class="card"><img onclick="getCardInfo(this)" data-toggle="modal" data-target="#cardInfoModal" src="' +image+'" name="' + data.name+ "-_-" + data.rarity + "-_-" + data.flavor + "-_-" + text + "-_-" + data.type + "-_-" + data.cardSet + "-_-" + data.cost + "-_-" + data.attack + "-_-" + data.health + "-_-" + data.artist +'" id="' + data.dbfId + "-_-" + data.img + '"/></div><center></div>')
                        } 
                    })
                }
            })
        })
        .catch((reject) => {
            console.log(reject)
        });
    });

    function getCardSets() {
        return new Promise(function(resolve, reject) {
            $.ajax({
            type: "GET",
            url: "https://omgvamp-hearthstone-v1.p.rapidapi.com/info",
            headers: {
                "x-rapidapi-key": xRapidapiKey,
                "x-rapidapi-host": "omgvamp-hearthstone-v1.p.rapidapi.com"
            },
            dataType: "json",
            success: function (data, textStatus, request) {
                var dataValue = "";
                if(cardFormat== "Standard"){
                    dataValue = data.standard;
                } else {
                    dataValue = data.wild;
                }
                var serverResponse = dataValue;
                contentType: "application/json";
                $.each(serverResponse, function (i, serverResponse) {
                    cardSet.push(serverResponse) 
                })
                resolve(textStatus)   
            },
            error: function (request, textStatus, errorThrown){
                reject(errorThrown)
            } 
            })
        })
    }
        function getQueryVariable(variable) {
            var query = URL;
            var vars = query.split("&");
            for (var i = 0; i < vars.length; i++) {
                var pair = vars[i].split("=");
                if (pair[0] == variable) {
                    return pair[1];
                }
            }
            return false;
        }

        function getCardInfo(card){
         var divAdditionalInfo = $("#additionalInfo");  
         cleanCardInfo();

         var id = (card.id.split("-_-"))[0];
         var img = (card.id.split("-_-"))[1];
         var image = "";
         if(img == "undefined") {
           image = "../images/no-image.png"
         } else {
           image = img
         }
         var name = (card.name.split("-_-"))[0];
         var rarity = (card.name.split("-_-"))[1];
         var flavorValue = (card.name.split("-_-"))[2];
         var textValue = (card.name.split("-_-"))[3];
         var type = (card.name.split("-_-"))[4];
         var set = (card.name.split("-_-"))[5];
         var cost = (card.name.split("-_-"))[6];
         var attack = (card.name.split("-_-"))[7];
         var health = (card.name.split("-_-"))[8];
         var artist = (card.name.split("-_-"))[9];

         var flavor = "";
         var text = "";

         if(flavorValue == "undefined") {
           flavor = "";
         } else {
           flavor = flavorValue
         }

         if(textValue == "undefined") {
           text = "";
         } else {
           text = textValue
         }

         if(type == "undefined") {
         } else {
           divAdditionalInfo.append('<label id="typeLabel">Type: '+type+'</label><br>')
         }

         if(set == "undefined") {
         } else {
           divAdditionalInfo.append('<label id="setLabel">Set: '+set+'</label><br>')
         }

         if(cost == "undefined") {
         } else {
           divAdditionalInfo.append('<label id="costLabel">Cost to Craft: '+cost+'</label><br>')
         }

         if(attack == "undefined") {
         } else {
           divAdditionalInfo.append('<label id="attackLabel">Attack: '+attack+'</label><br>')
         }

         if(health == "undefined") {
         } else {
           divAdditionalInfo.append('<label id="healthLabel">Health: '+health+'</label><br>')
         }
        
        if(artist == "undefined") {
         } else {
           divAdditionalInfo.append('<label id="artistLabel">Artist: '+artist+'</label><br>')
         }

         var count = 1;
         document.getElementById("titleCardInfo").text = name;
         flavorValue.innerHTML = flavor;
         $("#text").append(text);
         imageElement = document.getElementById("imgCardInfo")
         imageElement.setAttribute("src", image)
         cardIDValue.innerHTML = id;
         cardRarityValue.innerHTML = rarity;
        }

        function addCardToDeck() {
            var countCardsElement = document.getElementById("countCards")
            var maxElement = document.getElementById("max")
            var submitDeck = document.getElementById("submitDeck")
            var count = 0;
            var cardName = document.getElementById("titleCardInfo").text;
            var id = document.getElementById("cardIDValue").innerHTML;
            var rarity = document.getElementById("cardRarityValue").innerHTML;
            var newCountCards = parseInt(document.getElementById("countCards").innerHTML)

            var cardNameFixed = cardName.replace(/\s+/g, '')

            if(cardNames.includes(cardName)) {
                count = 2;
                if(cardNamesDuplicated.includes(cardName)){
                    alert(cardName + " has already 2 cards selected")
                } else if (rarity=="Legendary") {
                    alert("You can only have 1 Legendary card for "+cardName)
                } else if(newCountCards>=30){
                    alert("You can only select 30 cards!")
                } else {
                    countCards = newCountCards + 1
                    if(countCards>=30){
                        submitDeck.hidden = false
                        limitCards();
                        countCardsElement.style.color = '#A2F130'
                        maxElement.style.color = '#A2F130'
                    }
                    cardNamesDuplicated.push(cardName)
                    document.getElementById(cardNameFixed+"Count").innerHTML = count;
                    document.getElementById(cardNameFixed).setAttribute("name", cardName+"-_-"+count+"-_-"+id+"-_-"+rarity)
                    document.getElementById(cardNameFixed+"-_-Add").setAttribute("name", cardName+"-_-"+count+"-_-"+id+"-_-"+rarity)
                    document.getElementById(cardNameFixed+"-_-Info").innerHTML = cardName+"-_-"+count+"-_-"+rarity
                    document.getElementById("countCards").innerHTML = countCards
                    document.getElementById("countCards").setAttribute("name", countCards)
                }
            } else if(newCountCards>=30){
                alert("You can only select 30 cards!")
            } else {
                count = 1;
                countCards = newCountCards + 1
                cardNames.push(cardName)
                cardNameFixed = cardName.replace(/\s+/g, '')
                var fila = "<tr><td align='center'>" + cardName + "</td><td align='center' id='" + cardNameFixed + "Count'>" + count + "</td><td align='center'><a href='#' id='"+ cardNameFixed +"' name='" + cardName + "-_-" + count + "-_-" + id + "-_-" + rarity +"' onclick='deleteCardFromDeck(this)'><span class='glyphicon glyphicon-minus'></span><a><a href='#' id='"+ cardNameFixed + "-_-Add" +"' name='" + cardName + "-_-" + count + "-_-" + id + "-_-" + rarity +"' onclick='doubleCardFromDeck(this)'><span class='glyphicon glyphicon-plus'></span><a></td><td align='center' id='" + cardNameFixed + "-_-Info' hidden>" + cardName + "-_-" + count + "-_-" + rarity + "</td></tr>";
                var tr = document.createElement("TR");
                tr.innerHTML = fila;
                tr.setAttribute("draggable", "true");
                document.getElementById("tableDeckCards").appendChild(tr);
                document.getElementById("countCards").innerHTML = countCards
                document.getElementById("countCards").setAttribute("name", countCards)
                if(countCards>=30){
                        submitDeck.hidden = false
                        limitCards();
                        countCardsElement.style.color = '#A2F130'
                        maxElement.style.color = '#A2F130'
                    }
            }
        }

        function deleteCardFromDeck(card){
            var countCardsElement = document.getElementById("countCards")
            var maxElement = document.getElementById("max")
            countCardsElement.style.color = 'rgb(252, 209, 68)'
            maxElement.style.color = 'rgb(252, 209, 68)'
            var submitDeck = document.getElementById("submitDeck");
            submitDeck.hidden = true;
            var newCountCards = parseInt(document.getElementById("countCards").innerHTML)
            var cardNameFixed = card.id
            var cardName = (card.name.split("-_-"))[0];
            var count = (card.name.split("-_-"))[1];
            var id = (card.name.split("-_-"))[2];
            var rarity = (card.name.split("-_-"))[3];
            if(count==2) {
                count = 1;
                countCards = newCountCards - 1
                document.getElementById(cardNameFixed+"Count").innerHTML = ""
                document.getElementById(cardNameFixed+"Count").innerHTML = count
                removeItemFromArr(cardNamesDuplicated, cardName)
                document.getElementById(cardNameFixed).setAttribute("name", cardName+"-_-"+count+"-_-"+id+"-_-"+rarity)
                document.getElementById(cardNameFixed+"-_-Add").setAttribute("name", cardName+"-_-"+count+"-_-"+id+"-_-"+rarity)
                document.getElementById(cardNameFixed+"-_-Info").innerHTML = cardName+"-_-"+count+"-_-"+rarity
                document.getElementById("countCards").innerHTML = countCards
                document.getElementById("countCards").setAttribute("name", countCards)
            } else {
                countCards = newCountCards - 1
                $("#"+cardNameFixed).parent().parent().remove()
                removeItemFromArr(cardNames, cardName)
                removeItemFromArr(cardNamesDuplicated, cardName)
                document.getElementById("countCards").innerHTML = countCards
                document.getElementById("countCards").setAttribute("name", countCards)
            }
            
        }

        function doubleCardFromDeck(card){
            var countCardsElement = document.getElementById("countCards")
            var maxElement = document.getElementById("max")
            var submitDeck = document.getElementById("submitDeck")
            var cardNameFixed = (card.id.split("-_-"))[0];
            var cardName = (card.name.split("-_-"))[0];
            var count = (card.name.split("-_-"))[1];
            var id = (card.name.split("-_-"))[2];
            var rarity = (card.name.split("-_-"))[3];
            var newCountCards = parseInt(document.getElementById("countCards").innerHTML)
            if(count==2) {
                alert(cardName + " has already 2 cards selected!")   
            } else if(rarity=="Legendary"){
                alert("You can only have 1 Legendary card for "+cardName+"!")
            } else if(newCountCards>=30){
                alert("You can only select 30 cards!")
            } else {
                count = 2;
                countCards = newCountCards + 1
                document.getElementById(cardNameFixed+"Count").innerHTML = ""
                document.getElementById(cardNameFixed+"Count").innerHTML = count
                document.getElementById(cardNameFixed).setAttribute("name", cardName+"-_-"+count+"-_-"+id+"-_-"+rarity)
                document.getElementById(cardNameFixed+"-_-Add").setAttribute("name", cardName+"-_-"+count+"-_-"+id+"-_-"+rarity)
                document.getElementById(cardNameFixed+"-_-Info").innerHTML = cardName+"-_-"+count+"-_-"+rarity
                cardNamesDuplicated.push(cardName)
                document.getElementById("countCards").innerHTML = countCards
                document.getElementById("countCards").setAttribute("name", countCards)
                if(countCards>=30){
                        submitDeck.hidden = false
                        limitCards();
                        countCardsElement.style.color = '#A2F130'
                        maxElement.style.color = '#A2F130'
                    }
            }   
        }

        function removeItemFromArr ( arr, item ) {
            var i = arr.indexOf( item );
            if ( i !== -1 ) {
                arr.splice( i, 1 );
            }
        }

        function getDeckCards(){
            return new Promise(function(resolve, reject) {
            var resume_table = document.getElementById("mt");
            for (var i = 1, row; row = resume_table.rows[i]; i++) {
                for (var j = 0, col; col = row.cells[j]; j++) {
                    var card = "";
                    if(`${j}`==3){
                        var card = `${col.innerText}`
                        cards.push(card)
                    } else{
                        if(`${col.innerText}`=="FinalRowLimit"){
                            resolve(cards)
                        }
                    }
                }
            }
            })
        }

        function createDeck(deckName, deck, cardFormat, cardClass, user) {
            var data = JSON.stringify({
                "deckName": deckName,
                "deckBlobUrl": "https://eoyappstorage.blob.core.windows.net/decks/" + deckName + "_" + user +".txt",
                "cardFormat": cardFormat,
                "cardClass": cardClass,
                "user": user,
                "text": JSON.stringify(deck)
            });

            var settings = {
                "async": true,
                "crossDomain": true,
                "url": window.location.origin + "/deck",
                "method": "POST",
                "headers": {
                    "Content-Type": "application/json",
                    "cache-control": "no-cache"
                },
                "processData": false,
                "data": data
            }

            $.ajax(settings).done(function (response) {
                location.href = window.location.origin + "/deck"
            });
        }

        function validate() {

            getDeckCards().then((resolve) =>{
                var user = userName
                var card = resolve
                var flag = getQueryVariable("flag")
                var deck = [
                    {
                        deckName: deckName,
                        cardFormat: cardFormat,
                        cardClass: cardClass,
                        user: user,
                        deckCards: card
                    }
                ] 
                $("#submitDeck").attr("disabled", true);

                if (flag == "edit") {
                    editDeck(deckName, deck, user);
                } else {
                   createDeck(deckName, deck, cardFormat, cardClass, user);
                }
            })
            .catch((reject) => {
                console.log(reject)
            })
        }

        function limitCards(){
            var fila = "<tr hidden><td id='finalRow' align='center'>FinalRowLimit</td></tr>";
            var tr = document.createElement("TR");
            tr.innerHTML = fila;
            tr.setAttribute("draggable", "true");
            tr.setAttribute("hidden", "true");
            document.getElementById("tableDeckCards").appendChild(tr);
        }

        function cleanCardInfo(){
         var cardIDValue = document.getElementById("cardIDValue")
         var cardRarityValue = document.getElementById("cardRarityValue")
         var additionalInfoDiv = document.getElementById("additionalInfo")
         var flavorValue = document.getElementById("flavor")
         var textValue = document.getElementById("text")

         additionalInfoDiv.innerHTML = "";
         cardIDValue.innerHTML = "";
         cardRarityValue.innerHTML = "";
         flavorValue.innerHTML = "";
         textValue.innerHTML = "";
        }

        function editDeck(deckName, deck, user){
            var data = JSON.stringify({
                "deckName": deckName,
                "user": user,
                "text": JSON.stringify(deck)
            });

            var settings = {
                "async": true,
                "crossDomain": true,
                "url": window.location.origin + "/deck/" + deckName + "-_-" + user,
                "method": "PUT",
                "headers": {
                    "Content-Type": "application/json",
                    "cache-control": "no-cache"
                },
                "processData": false,
                "data": data
            }

            $.ajax(settings).done(function (response) {
                location.href = window.location.origin + "/deck"
            });
        }
    </script>
</body>